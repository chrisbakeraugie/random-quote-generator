{"version":3,"sources":["components/Button.js","components/Quote.js","components/Author.js","components/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["Button","buttonDisplayName","clickHandler","id","onClick","Quote","props","finalQuote","quote","Author","author","QuoteMachine","assignNewQuoteIndex","href","encodeURI","App","state","quotes","selectedQuoteIndex","chooseQuoteIndex","bind","fetch","then","data","json","d","setState","this","Math","floor","random","length","console","log","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAWeA,G,MANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,kBAAmBC,EAAtB,EAAsBA,aAAtB,OACX,4BAAQC,GAAG,YAAYC,QAASF,GAAeD,KCQpCI,EAXD,SAACC,GAAD,OACV,yBAAKH,GAAG,QAAR,IACMG,EAAMC,WAAaD,EAAMC,WAAWC,MAAQ,GAAK,KADvD,MCSWC,EAXA,SAACH,GAAD,OACX,yBAAKH,GAAG,UAAR,KACQG,EAAMC,WAAaD,EAAMC,WAAWG,OAAS,OCsB1CC,EAnBM,SAACL,GAAD,OACjB,yBAAKH,GAAG,iBACJ,yBAAKA,GAAG,aAQJ,kBAAC,EAAD,CAAOI,WAAYD,EAAMC,aACzB,kBAAC,EAAD,CAAQA,WAAYD,EAAMC,aAC1B,kBAAC,EAAD,CAAQN,kBAAkB,aAAaC,aAAcI,EAAMM,sBAC3D,uBAAGT,GAAG,cAAcU,KAAMC,UAAU,yCAAD,OAA0CR,EAAMC,WAAWC,MAAQ,KAAOF,EAAMC,WAAWG,UAA9H,YCiDGK,E,YA/Db,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,MAAQ,CACXC,OAAQ,GACRC,mBAAoB,MAEtB,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKR,oBAAsB,EAAKA,oBAAoBQ,KAAzB,gBAPV,E,iFAiBE,IAAD,OAClBC,MAAM,yIACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAC,OAAI,EAAKC,SAAS,CAAET,OAAQQ,OAClCH,KAAKK,KAAKf,yB,yCAUb,OADoBgB,KAAKC,MAAMD,KAAKE,UAAYH,KAAKX,MAAMC,OAAOc,OAAS,M,4CAe3EJ,KAAKD,SAAS,CAAER,mBAAoBS,KAAKR,uB,+BAMzC,OAFAa,QAAQC,IAAIN,KAAKX,MAAMC,QACvBe,QAAQC,IAAIN,KAAKX,MAAME,mBAAqB,yBAE1C,yBAAKgB,UAAU,MAAM/B,GAAG,aAEpBwB,KAAKpB,WACL,kBAAC,EAAD,CAAcA,WAAYoB,KAAKpB,WAAYK,oBAAqBe,KAAKf,sBACrE,Q,iCAlBN,OAAQe,KAAKX,MAAMC,OAAOU,KAAKX,MAAME,wB,GAvCvBiB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.f936a637.chunk.js","sourcesContent":["import React from 'react';\n\n\n\n\nconst Button = ({ buttonDisplayName, clickHandler }) => (\n    <button id=\"new-quote\" onClick={clickHandler}>{buttonDisplayName}</button>\n);\n\n\n\nexport default Button;","import React from 'react';\n\n\nconst Quote = (props) => (\n    <div id=\"text\">\n        \"{props.finalQuote ? props.finalQuote.quote + \"\" : null}\"\n    </div>);\n\n\n\n\n\n\n\nexport default Quote;","import React from 'react';\n\nconst Author = (props) => (\n    <div id=\"author\">\n         - {props.finalQuote ? props.finalQuote.author : null}\n    </div>);\n\n\n\n\n\n\n\nexport default Author;","import React from 'react';\nimport Button from './Button';\nimport Quote from './Quote';\nimport Author from './Author';\n\n\n\nconst QuoteMachine = (props) => (\n    <div id=\"quote-machine\">\n        <div id=\"quote-box\">\n            \n            {/* This is the old framework. Will work if uncommented  */}\n            {/* {props.finalQuote ? \nprops.finalQuote.quote \n+ \"-\" + props.finalQuote.author  : \"\"}\n<Button buttonDisplayName=\"Next Quote\" clickHandler={props.assignNewQuoteIndex} /> */}\n           \n            <Quote finalQuote={props.finalQuote}></Quote>\n            <Author finalQuote={props.finalQuote}></Author>\n            <Button buttonDisplayName=\"Next Quote\" clickHandler={props.assignNewQuoteIndex} />\n            <a id=\"tweet-quote\" href={encodeURI(`https://twitter.com/intent/tweet?text=${props.finalQuote.quote + \" -\" + props.finalQuote.author}`)}>Tweet</a>\n        </div>\n\n    </div>);\n\n\nexport default QuoteMachine;","import React, { Component } from 'react';\nimport './App.css';\nimport QuoteMachine from './components/QuoteMachine';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      selectedQuoteIndex: null\n    }\n    this.chooseQuoteIndex = this.chooseQuoteIndex.bind(this);\n    this.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this);\n  }\n\n  /**\n   * Immediatley after component loads, use:\n   * fetch for api to the quote data\n   * then uses .json to parse that data\n   * then fills the quotes array in state with parsed data\n   * then sets the selected quote index with chooseQuoteIndex()\n   */\n  componentDidMount() {\n    fetch(\"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\")\n      .then(data => data.json())\n      .then(d => this.setState({ quotes: d }))\n      .then(this.assignNewQuoteIndex());\n  }\n\n\n  /**\n   * Creates a random number based on the length of whatever length of data is fetched\n   * returns that number\n   */\n  chooseQuoteIndex() {\n    let randomNumber = (Math.floor(Math.random() * (this.state.quotes.length + 1)));\n    return randomNumber;\n  }\n\n  /**\n   * returns the quote to be rendered in the DOM\n   */\n  get finalQuote() {\n    return (this.state.quotes[this.state.selectedQuoteIndex]);\n  }\n\n  /**\n   * \n   */\n  assignNewQuoteIndex() {\n    this.setState({ selectedQuoteIndex: this.chooseQuoteIndex()});\n  }\n\n  render() {\n    console.log(this.state.quotes);\n    console.log(this.state.selectedQuoteIndex + \"looks like it worked?\");\n    return (\n      <div className=\"App\" id=\"quote-box\">\n        {\n          this.finalQuote ? \n          <QuoteMachine finalQuote={this.finalQuote} assignNewQuoteIndex={this.assignNewQuoteIndex}/>\n        : null}\n  </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}